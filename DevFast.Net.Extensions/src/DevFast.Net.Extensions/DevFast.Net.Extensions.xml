<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevFast.Net.Extensions</name>
    </assembly>
    <members>
        <member name="T:DevFast.Net.Extensions.AssemblyDoc">
            <summary>
            This assembly contains various well-tested, self-explained &amp; easy to use extension methods
            to achieve optimized runtime performance with improved readability of the code.
            </summary>
        </member>
        <member name="T:DevFast.Net.Extensions.SystemTypes.ByteArrays">
            <summary>
            Extension methods on Array of type <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.ByteArrays.LiftNCopySafe(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="total"/> bytes starting from <paramref name="sourcePosition"/> (included) 
            to <paramref name="targetPosition"/> (Included) and onwards.
            <para>
            NOTE: This method is SAFE version of <see cref="M:DevFast.Net.Extensions.SystemTypes.ByteArrays.LiftNCopyUnSafe(System.Byte[],System.Int32,System.Int32,System.Int32)"/> as
            constraint are checked.
            </para>
            </summary>
            <param name="bytes">Source array.</param>
            <param name="sourcePosition">Position from which to start copying bytes.</param>
            <param name="total">Total number of bytes to copy.</param>
            <param name="targetPosition">Position at which starting writing the bytes.</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.ByteArrays.LiftNCopyUnSafe(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="total"/> bytes starting from <paramref name="sourcePosition"/> (included) 
            to <paramref name="targetPosition"/> (Included) and onwards.
            <para>
            !!!- CALL IT AT YOUR OWN RISK -!!!
            </para>
            <para>
            This method is UNSAFE version of <see cref="M:DevFast.Net.Extensions.SystemTypes.ByteArrays.LiftNCopySafe(System.Byte[],System.Int32,System.Int32,System.Int32)"/> 
            as no constraint will be check. Caller MUST make sure all required constraints are checked beforehand.
            </para>
            </summary>
            <param name="bytes">Source array.</param>
            <param name="sourcePosition">Position from which to start copying bytes.</param>
            <param name="total">Total number of bytes to copy.</param>
            <param name="targetPosition">Position at which starting writing the bytes.</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.ByteArrays.DoubleByteCapacity(System.Byte[])">
            <summary>
            Creates a new array with double the size. Copies the content of <paramref name="source"/> to the newly created array.
            </summary>
            <param name="source">Source array</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.ByteArrays.EnsureByteCapacity(System.Byte[],System.Int32)">
            <summary>
            Checks if array needs to be up-sized. When resize takes place, the content of <paramref name="source"/>
            are copied to the newly created array.
            </summary>
            <param name="source">Source array</param>
            <param name="capacity">Minimum length of the array</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.ByteArrays.EnsureByteCapacity(System.Byte[]@,System.Int32)">
            <summary>
            Checks if array needs to be resized. When resize takes place, the content of <paramref name="source"/>
            are copied to the newly created array.
            </summary>
            <param name="source">Source array</param>
            <param name="capacity">Minimum length of the array</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.ByteArrays.CopyToSafe(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="total"/> bytes of <paramref name="source"/> array starting from 
            <paramref name="sourcePosition"/> (included) to <paramref name="target"/> array's
            <paramref name="targetPosition"/> (included) and onwards.
            <para>
            This method is SAFE version of <see cref="M:DevFast.Net.Extensions.SystemTypes.ByteArrays.CopyToUnSafe(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32)"/> 
            as constraint are checked.
            </para>
            </summary>
            <param name="source">Source array</param>
            <param name="target">Target array</param>
            <param name="sourcePosition">Position in source array to start copying byte from.</param>
            <param name="total">Total number of bytes to copy.</param>
            <param name="targetPosition">Position in target array to start writing the bytes to.</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.ByteArrays.CopyToUnSafe(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="total"/> bytes of <paramref name="source"/> array starting from 
            <paramref name="sourcePosition"/> (included) to <paramref name="target"/> array's
            <paramref name="targetPosition"/> (included) and onwards.
            <para>
            !!!- CALL IT AT YOUR OWN RISK -!!!
            </para>
            <para>
            This method is UNSAFE version of <see cref="M:DevFast.Net.Extensions.SystemTypes.ByteArrays.CopyToSafe(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32)"/> 
            as no constraint will be check. Caller MUST make sure all required constraints are checked beforehand.
            </para>
            </summary>
            <param name="source">Source array</param>
            <param name="target">Target array</param>
            <param name="sourcePosition">Position in source array to start copying byte from.</param>
            <param name="total">Total number of bytes to copy.</param>
            <param name="targetPosition">Position in target array to start writing the bytes to.</param>
        </member>
        <member name="T:DevFast.Net.Extensions.SystemTypes.Enumerables">
            <summary>
            Extension methods on <see cref="T:System.Collections.Generic.IEnumerable`1"/> and <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.Enumerables.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.CancellationToken},System.Threading.CancellationToken)">
            <summary>
            Calls <paramref name="lambda"/> for every item in <paramref name="collection"/> with given <paramref name="token"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">Enumerable items</param>
            <param name="lambda">predicate to apply</param>
            <param name="token">Cancellation token to pass on to the supplied <paramref name="lambda"/></param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.Enumerables.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls <paramref name="lambda"/> for every item in <paramref name="collection"/> with given <paramref name="token"/>, asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">Enumerable items</param>
            <param name="lambda">Action to apply</param>
            <param name="token">Cancellation token to pass on to the supplied <paramref name="lambda"/></param>
            <param name="continueOnCapturedContext"><see langword="true"/> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.Enumerables.ForEachAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls <paramref name="lambda"/> for every item in <paramref name="asyncCollection"/> with given <paramref name="token"/>, asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="asyncCollection">Asynchronously Enumerable items</param>
            <param name="lambda">Action to apply</param>
            <param name="token">Cancellation token to pass on to the supplied <paramref name="lambda"/> and <paramref name="asyncCollection"/></param>
            <param name="continueOnCapturedContext"><see langword="true"/> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.Enumerables.SelectAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls <paramref name="lambda"/> for every item in <paramref name="collection"/> with given <paramref name="token"/>, asynchronously, and returns the
            outputs as a newly created asynchronous enumerable.
            </summary>
            <typeparam name="TIn">Input Type</typeparam>
            <typeparam name="TOut">Output Type</typeparam>
            <param name="collection">Enumerable items</param>
            <param name="lambda">Action to apply</param>
            <param name="token">Cancellation token to pass on to the supplied <paramref name="lambda"/></param>
            <param name="continueOnCapturedContext"><see langword="true"/> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.Enumerables.SelectAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls <paramref name="lambda"/> for every item in <paramref name="asyncCollection"/> with given <paramref name="token"/>, asynchronously.
            Returns outputs as a newly created asynchronous enumerable.
            </summary>
            <typeparam name="TIn">Input Type</typeparam>
            <typeparam name="TOut">Output Type</typeparam>
            <param name="asyncCollection">Asynchronously Enumerable items</param>
            <param name="lambda">Action to apply</param>
            <param name="token">Cancellation token to pass on to the supplied <paramref name="lambda"/> and <paramref name="asyncCollection"/></param>
            <param name="continueOnCapturedContext"><see langword="true"/> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.Enumerables.SkipAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            While iterating on supplied <paramref name="asyncCollection"/> total of <paramref name="count"/>
            elements are bypassed and remaining (if any) items are returned as a part of iteration.
            No exception is thrown it <paramref name="asyncCollection"/> contains lesser number of items. 
            </summary>
            <typeparam name="TIn">Input Type</typeparam>
            <param name="asyncCollection">Asynchronously Enumerable items</param>
            <param name="count">Total number of elements to skip</param>
            <param name="token">Cancellation token for <paramref name="asyncCollection"/></param>
            <param name="continueOnCapturedContext"><see langword="true"/> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.Enumerables.TakeAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            While iterating on supplied <paramref name="asyncCollection"/> maximum of <paramref name="count"/>
            elements are returned as a part of iteration.
            If <paramref name="asyncCollection"/> contains lesser number of items, all iterated items
            are returned. 
            </summary>
            <typeparam name="TIn">Input Type</typeparam>
            <param name="asyncCollection">Asynchronously Enumerable items</param>
            <param name="count">Total number of elements to skip</param>
            <param name="token">Cancellation token for <paramref name="asyncCollection"/></param>
            <param name="continueOnCapturedContext"><see langword="true"/> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.Enumerables.WhereAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls <paramref name="predicate"/> for every item in <paramref name="asyncCollection"/> with given <paramref name="token"/>, asynchronously. Returns the
            filtered items as a newly created asynchronous enumerable.
            </summary>
            <typeparam name="T">Input Type</typeparam>
            <param name="asyncCollection">Asynchronously Enumerable items</param>
            <param name="predicate">Predicate to apply</param>
            <param name="token">Cancellation token to pass on to the supplied <paramref name="predicate"/> and <paramref name="asyncCollection"/></param>
            <param name="continueOnCapturedContext"><see langword="true"/> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.Enumerables.ToListAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Returns a new <see cref="T:System.Collections.Generic.List`1"/> containing all the items of provided <paramref name="asyncCollection"/> asynchronously.
            </summary>
            <typeparam name="T">Input Type</typeparam>
            <param name="asyncCollection">Asynchronously Enumerable items</param>
            <param name="token">Cancellation token to observe while iterating <paramref name="asyncCollection"/></param>
            <param name="continueOnCapturedContext"><see langword="true"/> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:DevFast.Net.Extensions.SystemTypes.Enumerables.ToChunksAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32,System.Threading.CancellationToken,System.Boolean,System.Boolean)">
            <summary>
            Collects maximum possible (controlled by <paramref name="maxChunkSize"/>) items in the provided <paramref name="asyncCollection"/>, puts it
            in a list and returns such lists as a part of newly created asynchronous enumerable.
            <para>
            USE-CASE: When the cost of calling <see cref="M:DevFast.Net.Extensions.SystemTypes.Enumerables.ToListAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken,System.Boolean)"/> is too huge (requires too much memory or items
            are too many to fit in a single <see cref="T:System.Collections.Generic.List`1"/>); and working on a small set of such items (instead of consuming single item at a time)
            is advantageous (for e.g. database batch inserts using medium sized asyncCollection, instead of inserting item at a time).
            </para>
            </summary>
            <typeparam name="T">Input Type</typeparam>
            <param name="asyncCollection">Asynchronously Enumerable items</param>
            <param name="maxChunkSize">Maximum size of chunk</param>
            <param name="token">Cancellation token to observe while iterating <paramref name="asyncCollection"/></param>
            <param name="reUseList"><see langword="true"/> to reuse list for next iteration result; otherwise, <see langword="false"/>.
            <para>
            USE-CASE of <see langword="true"/>: Resultant chunk (<see cref="T:System.Collections.Generic.List`1"/>) of an iteration is out-of-scope (i.e. candidate for GC) after the iteration.
            In other words, it is not shared with some part of the code which may out-live the iteration (e.g. a <see cref="T:System.Threading.Tasks.Task"/>) or
            the reference of the list itself out-lives the iteration (e.g. setting it to a static field or a reference to another variable that out-lives the iteration).
            If such conditions are met, we are better off reusing the list (already allocated space) compared to re-creating a list again.
            </para>
            <para>
            WARNING: Be sure of the use-case when passing <see langword="true"/>, in case of doubt pass <see langword="false"/>.
            </para>
            </param>
            <param name="continueOnCapturedContext"><see langword="true"/> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="T:DevFast.Net.Extensions.SystemTypes.NamespaceDoc">
            <summary>
            Under this <see langword="namespace"/> we have collected several extension methods on various system types (for e.g. <see cref="T:System.Array"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, ... ).
            </summary>
        </member>
    </members>
</doc>
